#!/bin/sh
set -euf

# Constants for --help
VERSION="gitsh 0.2"
DESCRIPTION="
A tool that exposes a suite of commands to retrieve a variety of informations about git repositories."
USAGE="
  gitsh --help
  gitsh [OPTIONS]"
OPTIONS="
  --help:           Print this help and exit
  --ahead:          Show the number of commits ahead compared to upstream
  --behind:         Show the number of commits behind compared to upstream
  --branch:         Show the current git branch
  --repo:           Show the git repository directory name
  --repo-branch     Show the current git repo and branch
  --repo-path:      Show the git repository absolute path
  --edited:         Show the number of edited files
  --staged:         Show the number of staged files
  --staged-in:      Show the number of constructively staged files (added, modified)
  --staged-out:     Show the number of destructively staged files (deleted)
  --untracked:      Show the number of untracked files
  -w:               Print a whitespace
  "
DEPENDENCIES="
  git:              Hard requirement"

extractValue()
{
	echo "$1" | cut -d "=" -f 2
}

ahead()
{
	NUMBER=$(git --no-optional-locks rev-list --left-right --count HEAD...@{upstream} | cut -f 1)
	if [ $NUMBER -gt 0 ]; then
		echo "▲${NUMBER} "
	fi
}

behind()
{
	NUMBER=$(git --no-optional-locks rev-list --left-right --count HEAD...@{upstream} | cut -f 2)
	if [ $NUMBER -gt 0 ]; then
		echo "▼${NUMBER} "
	fi
}

branch()
{
	RESULT=$(git --no-optional-locks branch 2> /dev/null)
	if [ $? -eq 0 ]; then
		echo "▸$(echo ${RESULT} | grep "*" | colrm 1 2) "
	fi
}
repopath()
{
	RESULT=$(git --no-optional-locks worktree list --porcelain 2> /dev/null)
	if [ $? -eq 0 ]; then
		echo "$(echo ${RESULT} | grep worktree | cut -d " " -f 2)"
	else
		false
	fi
}
repo()
{
	RESULT=$(repopath)
	if [ $? -eq 0 ]; then
		echo " $(basename ${RESULT} 2> /dev/null)"
	fi
}
edited()
{
	NUMBER=$(git --no-optional-locks status --porcelain 2> /dev/null | colrm 3 | colrm 1 1 | grep -v " \|?" | wc -l | tr -d ' ')
	if [ $NUMBER -gt 0 ]; then
		echo "~${NUMBER} "
	fi
}
staged()
{
	git --no-optional-locks status --porcelain 2> /dev/null | colrm 2 | grep -v " \|?" | wc -l
}
stagedin()
{
	NUMBER=$(git --no-optional-locks status --porcelain 2> /dev/null | colrm 2 | grep -v " \|?\|D" | wc -l | tr -d ' ')
	if [ $NUMBER -gt 0 ]; then
		echo "+${NUMBER} "
	fi
}
stagedout()
{
	NUMBER=$(git --no-optional-locks status --porcelain 2> /dev/null | colrm 2 | grep -v " \|?\|m\|M\|A" | wc -l | tr -d ' ')
	if [ $NUMBER -gt 0 ]; then
		echo "-${NUMBER} "
	fi
}
untracked()
{
	NUMBER=$(git --no-optional-locks status --porcelain 2> /dev/null | colrm 2 | grep ? | wc -l | tr -d ' ')
	if [ $NUMBER -gt 0 ]; then
		echo "${NUMBER}? "
	fi
}

for arg in "${@:---help}"; do
	case "${arg}" in
		--help) printf "%s%s\n\nUSAGE:%s\n\nOPTIONS:%s\n\nDEPENDENCIES:%s\n" "${VERSION}" "${DESCRIPTION}" "${USAGE}" "${OPTIONS}" "${DEPENDENCIES}"; exit;;
		--ahead) ahead;;
		--behind) behind;;
		--branch) branch;;
		--repo) repo;;
		--repo-branch) echo "$(repo)$(branch)";;
		--repo-path) repopath;;
		--edited) edited;;
		--staged) staged;;
		--staged-in) stagedin;;
		--staged-out) stagedout;;
		--untracked) untracked;;
		-w) printf " ";;
		*) cd ${arg};;
	esac
done
